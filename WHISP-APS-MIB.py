#
# PySNMP MIB module WHISP-APS-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/WHISP-APS-MIB
# Produced by pysmi-0.0.7 at Wed Oct 12 12:15:46 2016
# On host ? platform ? version ? by user ?
# Using Python version 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)]
#
( OctetString, ObjectIdentifier, Integer, ) = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
( NotificationGroup, ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
( ModuleIdentity, IpAddress, Unsigned32, iso, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Counter32, MibIdentifier, ObjectIdentity, Integer32, Gauge32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Unsigned32", "iso", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Counter32", "MibIdentifier", "ObjectIdentity", "Integer32", "Gauge32")
( TextualConvention, DisplayString, MacAddress, PhysAddress, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "PhysAddress")
( whispBoxRFPhysicalRadioEntry, whispBoxEsn, ) = mibBuilder.importSymbols("WHISP-BOX-MIBV2-MIB", "whispBoxRFPhysicalRadioEntry", "whispBoxEsn")
( whispAps, whispBox, whispModules, ) = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispAps", "whispBox", "whispModules")
( WhispLUID, WhispMACAddress, EventString, ) = mibBuilder.importSymbols("WHISP-TCV2-MIB", "WhispLUID", "WhispMACAddress", "EventString")
whispApsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 12))
whispApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1))
whispApsLink = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2))
whispApsLinkTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1))
whispApsLinkTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2))
whispApsGPS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3))
whispApsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5))
whispApsRegEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1))
whispGPSEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2))
whispApsDfsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3))
whispApRegulatoryEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4))
whispApRFOverloadEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5))
whispApsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6))
whispApsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7))
whispApsDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9))
whispApsControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11))
whispApsRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10))
gpsInput = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("generateSyncSignal", 0), ("syncToReceivedSignalTimingPort", 1), ("syncToReceivedSignalPowerPort", 2),))).setMaxAccess("readwrite")
rfFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("wired", 0),))).setMaxAccess("readwrite")
apLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
dwnLnkData = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,99))).setUnits('%').setMaxAccess("readwrite")
highPriorityUpLnkPct = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,99))).setUnits('%').setMaxAccess("readwrite")
numUAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
uAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
numDAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
dAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
numCtlSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
numCtlSlotsReserveHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
upLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 12), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
upLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 13), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
dwnLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 14), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
dwnLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 15), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
sectorID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readwrite")
maxRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 17), Integer32()).setUnits('miles').setMaxAccess("readwrite")
airLinkSecurity = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("standard", 0), ("desEnhanced", 1), ("desEnhancedAndAuthentication", 2), ("authenticationIfAvailable", 3),))).setMaxAccess("readwrite")
berMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("berStream", 0), ("noBerStream", 1),))).setMaxAccess("readwrite")
asIP1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
asIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
asIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
lanIpAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
lanMaskAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
defaultGwAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
privateIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
gpsTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("gpsTrapDisabled", 0), ("gpsTrapEnabled", 1),))).setMaxAccess("readwrite")
regTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("regTrapDisabled", 0), ("regTrapEnabled", 1),))).setMaxAccess("readwrite")
txSpreading = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("txSpreadingDisabled", 0), ("txSpreadingEnabled", 1),))).setMaxAccess("readwrite")
apBeaconInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("enableApBeaconInfo", 0), ("disableApBeaconInfo", 1),))).setMaxAccess("readwrite")
authMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4,))).clone(namedValues=NamedValues(("authenticationDisabled", 0), ("authenticationRequiredBam", 1), ("authenticationRequiredAP", 3), ("authenticationRequiredAAA", 4),))).setMaxAccess("readwrite")
authKeyAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
encryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("encryptionDisabled", 0), ("encryptionEnabled", 1),))).setMaxAccess("readwrite")
ntpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 34), IpAddress()).setMaxAccess("readwrite")
broadcastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
encryptDwBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
updateAppAddress = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 37), IpAddress()).setMaxAccess("readwrite")
dfsConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
configSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("bam", 0), ("sm", 1), ("bamsm", 2),))).setMaxAccess("readwrite")
apRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("onex", 0), ("onextwox", 1), ("onextwoxthreex", 2),))).setMaxAccess("readwrite")
numCtlSlotsHW = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
displayAPEval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1),))).setMaxAccess("readwrite")
smIsolation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("smIsolationDisable", 0), ("smIsolationDrop", 1), ("smIsolationFwd", 2),))).setMaxAccess("readwrite")
ipAccessFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
allowedIPAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 46), IpAddress()).setMaxAccess("readwrite")
allowedIPAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 47), IpAddress()).setMaxAccess("readwrite")
allowedIPAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 48), IpAddress()).setMaxAccess("readwrite")
tslBridging = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
untranslatedArp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
limitFreqBand900 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
txPwrLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 52), Integer32()).setMaxAccess("readwrite")
rfFreqCaralt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("none", 0),))).setMaxAccess("readwrite")
rfFreqCaralt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("none", 0),))).setMaxAccess("readwrite")
scheduleWhitening = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
remoteSpectrumAnalysisDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,1000))).setMaxAccess("readwrite")
remoteSpectrumAnalyzerLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readwrite")
bhReReg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
dlnkBcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
verifyGPSChecksum = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("doNotVerifyGPSMessageChecksum", 0), ("verifyGPSMessageChecksum", 1),))).setMaxAccess("readwrite")
apVlanOverride = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
dhcpRelayAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("disable", 0), ("fullRelay", 1), ("option82Only", 2),))).setMaxAccess("readwrite")
dhcpRelayAgentSrvrIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 63), IpAddress()).setMaxAccess("readwrite")
colorCodeRescanTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,43200))).setMaxAccess("readwrite")
colorCodeRescanIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,60))).setMaxAccess("readwrite")
authKeyOptionAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("useDefault", 0), ("useKeySet", 1),))).setMaxAccess("readwrite")
asIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 67), IpAddress()).setMaxAccess("readwrite")
asIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 68), IpAddress()).setMaxAccess("readwrite")
onlyAllowVer95OrAbove = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("onlyAllowVer95OrAboveDisabled", 0), ("onlyAllowVer95OrAboveEnabled", 1),))).setMaxAccess("readwrite")
apRxDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 70), Integer32()).setMaxAccess("readwrite")
qinqEthType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4,))).clone(namedValues=NamedValues(("x88a8", 0), ("x8100", 1), ("x9100", 2), ("x9200", 3), ("x9300", 4),))).setMaxAccess("readwrite")
fskSMTxPwrCntl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
fskSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80,-40))).setUnits('dBm').setMaxAccess("readwrite")
authSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 74), DisplayString()).setMaxAccess("readwrite")
authSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 75), DisplayString()).setMaxAccess("readwrite")
authSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 76), DisplayString()).setMaxAccess("readwrite")
whispUsrAuthSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 79), DisplayString()).setMaxAccess("readwrite")
whispUsrAuthSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 80), DisplayString()).setMaxAccess("readwrite")
whispUsrAuthSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 81), DisplayString()).setMaxAccess("readwrite")
whispUsrAcctSvr1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 82), DisplayString()).setMaxAccess("readwrite")
whispUsrAcctSvr2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 83), DisplayString()).setMaxAccess("readwrite")
whispUsrAcctSvr3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 84), DisplayString()).setMaxAccess("readwrite")
whispUsrAuthPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("md5", 0),))).setMaxAccess("readwrite")
whispWebUseAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("useRADIUSAccountingSvr", 0), ("useRADIUSAuthenticationSvr", 1),))).setMaxAccess("readwrite")
dropSession = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 87), MacAddress()).setMaxAccess("readwrite")
uGPSPower = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("off", 0), ("on", 1),))).setMaxAccess("readwrite")
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,124))).setMaxAccess("readwrite")
ofdmSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80,-40))).setUnits('dBm').setMaxAccess("readwrite")
radiusPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 91), Integer32()).setMaxAccess("readwrite")
radiusAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 92), Integer32()).setMaxAccess("readwrite")
lastSesStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 93), DisplayString()).setMaxAccess("readonly")
resetSesStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("noReset", 0), ("reset", 1),))).setMaxAccess("readwrite")
rfOLTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0,))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0),))).setMaxAccess("readwrite")
rfOLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,100))).setUnits('%').setMaxAccess("readwrite")
rfOLEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0,))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0),))).setMaxAccess("readwrite")
actionListFilename = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 98), DisplayString()).setMaxAccess("readwrite")
enableAutoupdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
accountingSmReAuthInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 100), Integer32()).setMaxAccess("readwrite")
syslogDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1),))).setMaxAccess("readwrite")
syslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 102), DisplayString()).setMaxAccess("readwrite")
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 103), Integer32()).setMaxAccess("readwrite")
syslogXmitAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
syslogXmitSMs = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
accountingInterimUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 106), Integer32()).setMaxAccess("readwrite")
gpsOutputEn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("off", 0), ("on", 1),))).setMaxAccess("readwrite")
radioMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("combo", 0), ("comboDualChan", 1), ("mimoOnly", 2), ("fskOnly", 3),))).setMaxAccess("readwrite")
rfTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
upLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 208), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
dwnLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 209), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
rfPPPoEPADIForwarding = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
allowedIPAccessNMLength1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 211), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readwrite")
allowedIPAccessNMLength2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 212), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readwrite")
allowedIPAccessNMLength3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 213), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readwrite")
bridgeFloodUnknownsEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
berModSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("qpsk", 0), ("qam-16", 1), ("qam-64", 2), ("qam-256", 3),))).setMaxAccess("readwrite")
remoteSpectrumAnalyzerScanBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("bandwidth5MHz", 0), ("bandwidth10MHz", 1), ("bandwidth20MHz", 2),))).setMaxAccess("readwrite")
multicastVCDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 7, 8, 9,))).clone(namedValues=NamedValues(("disable", 0), ("rate1X", 4), ("rate2X", 5), ("rate4X", 7), ("rate6X", 8), ("rate8X", 9),))).setMaxAccess("readwrite")
dlnkMcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 218), Integer32()).setMaxAccess("readwrite")
multicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 219), Integer32()).setMaxAccess("readwrite")
apConfigAdjacentChanSupport = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 220), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
whispRegStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
linkTestLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
linkTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
linkTestAction = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("stopped", 0), ("start", 1),))).setMaxAccess("readwrite")
linkTestPktLength = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
linkTestMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("rflinktest", 0), ("linktestwithbridging", 1), ("linktestwithbridgingandmir", 2),))).setMaxAccess("readwrite")
linkTestSNRCalculation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0,))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0),))).setMaxAccess("readwrite")
linkTestWithDualPath = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("lowpriorityvconly", 0), ("highandlowpriorityvcs", 1),))).setMaxAccess("readwrite")
linkTestNumPkt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
testLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
linkTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
linkTestError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
testDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
downLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
upLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 6), Integer32()).setUnits('bps').setMaxAccess("readonly")
downLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
maxDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
actDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
expDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 10), Gauge32()).setMaxAccess("readonly")
actDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 11), Gauge32()).setMaxAccess("readonly")
upLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 12), Integer32()).setUnits('%').setMaxAccess("readonly")
expUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 13), Gauge32()).setMaxAccess("readonly")
actUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 14), Gauge32()).setMaxAccess("readonly")
maxUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 15), Integer32()).setMaxAccess("readonly")
actUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
fragments1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 17), Integer32()).setMaxAccess("readonly")
fragments2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 18), Integer32()).setMaxAccess("readonly")
fragments3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
fragments4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
fragments1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 21), Integer32()).setMaxAccess("readonly")
fragments2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 22), Integer32()).setMaxAccess("readonly")
fragments3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
fragments4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 24), Integer32()).setMaxAccess("readonly")
bitErrorsCorrected1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 26), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 27), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 28), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 29), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 30), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 31), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 32), DisplayString()).setMaxAccess("readonly")
signalToNoiseRatioDownLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
signalToNoiseRatioUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
fragments1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
fragments2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
fragments3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
fragments4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
fragments1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
fragments2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
fragments3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
fragments4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
bitErrorsCorrected1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 43), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 44), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 45), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 46), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 47), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 48), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 49), DisplayString()).setMaxAccess("readonly")
bitErrorsCorrected4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 50), DisplayString()).setMaxAccess("readonly")
signalToNoiseRatioDownLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 51), Integer32()).setMaxAccess("readonly")
signalToNoiseRatioUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 52), Integer32()).setMaxAccess("readonly")
whispGPSStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("gpsSynchronized", 1), ("gpsLostSync", 2), ("generatingSync", 3),))).setMaxAccess("readonly")
gpsSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
gpsSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
gpsTrackingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
gpsTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
gpsDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
gpsSatellitesTracked = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
gpsSatellitesVisible = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
gpsHeight = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
gpsAntennaConnection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
gpsLatitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
gpsLongitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
gpsInvalidMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
gpsRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 14), Integer32()).setMaxAccess("readonly")
gpsReInitCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 15), Integer32()).setMaxAccess("readonly")
gpsReceiverInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 16), DisplayString()).setMaxAccess("readonly")
gpsFreeRun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
autoSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("noSync", 0), ("onBoardGPSSync", 1), ("timingPortUGPSSync", 2), ("onBoardGPSAndTimingPortUGPSSync", 3), ("powrPortSync", 4), ("onBoardGPSAndPowrPortSync", 5), ("timingPortUGPSAndPowrPortSync", 6), ("onBoardGPSAndTimingPortUGPSAndPowrPortSync", 7),))).setMaxAccess("readonly")
whispRegComplete = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 1)).setObjects(*(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"),))
whispRegLost = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 2)).setObjects(*(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"),))
whispRegFailure = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 3)).setObjects(*(("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regGrantReason"),))
whispDefKeyUsed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 4)).setObjects(*(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"),))
whispGPSInSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 1)).setObjects(*(("WHISP-APS-MIB", "whispGPSStats"), ("WHISP-APS-MIB", "whispBoxEsn"),))
whispGPSOutSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 2)).setObjects(*(("WHISP-APS-MIB", "gpsStatus"), ("WHISP-APS-MIB", "whispBoxEsn"),))
whispRadarDetected = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 1)).setObjects(*(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-APS-MIB", "whispBoxEsn"),))
whispRadarEnd = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 2)).setObjects(*(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-APS-MIB", "whispBoxEsn"),))
regulatoryApCheckInvalidChanFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 1)).setObjects(*(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-APS-MIB", "whispBoxEsn"),))
regulatoryCheckFailedNoRegionAp = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 2)).setObjects(*(("WHISP-APS-MIB", "whispBoxEsn"),))
regulatoryApCheckInvalidChBwFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 3)).setObjects(*(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-APS-MIB", "whispBoxEsn"),))
rfLinkOverloadCondition = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5, 1)).setObjects(*(("WHISP-APS-MIB", "rfOutDiscardRate"), ("WHISP-APS-MIB", "whispBoxEsn"),))
whispLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 1)).setObjects(*(("WHISP-APS-MIB", "linkTestLUID"), ("WHISP-APS-MIB", "linkTestDuration"), ("WHISP-APS-MIB", "linkTestAction"), ("WHISP-APS-MIB", "linkTestPktLength"), ("WHISP-APS-MIB", "testLUID"), ("WHISP-APS-MIB", "linkTestStatus"), ("WHISP-APS-MIB", "linkTestError"), ("WHISP-APS-MIB", "testDuration"), ("WHISP-APS-MIB", "downLinkRate"), ("WHISP-APS-MIB", "upLinkRate"), ("WHISP-APS-MIB", "downLinkEff"), ("WHISP-APS-MIB", "maxDwnLinkIndex"), ("WHISP-APS-MIB", "actDwnLinkIndex"), ("WHISP-APS-MIB", "expDwnFragCount"), ("WHISP-APS-MIB", "actDwnFragCount"), ("WHISP-APS-MIB", "upLinkEff"), ("WHISP-APS-MIB", "expUpFragCount"), ("WHISP-APS-MIB", "actUpFragCount"), ("WHISP-APS-MIB", "maxUpLinkIndex"), ("WHISP-APS-MIB", "actUpLinkIndex"), ("WHISP-APS-MIB", "fragments1xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments2xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments3xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments4xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments1xUpLinkVertical"), ("WHISP-APS-MIB", "fragments2xUpLinkVertical"), ("WHISP-APS-MIB", "fragments3xUpLinkVertical"), ("WHISP-APS-MIB", "fragments4xUpLinkVertical"), ("WHISP-APS-MIB", "fragments1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments1xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkHorizontal"), ("WHISP-APS-MIB", "linkTestSNRCalculation"), ("WHISP-APS-MIB", "linkTestWithDualPath"), ("WHISP-APS-MIB", "linkTestMode"), ("WHISP-APS-MIB", "linkTestNumPkt"),))
whispApsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 2)).setObjects(*(("WHISP-APS-MIB", "gpsInput"), ("WHISP-APS-MIB", "rfFreqCarrier"), ("WHISP-APS-MIB", "dwnLnkData"), ("WHISP-APS-MIB", "highPriorityUpLnkPct"), ("WHISP-APS-MIB", "numUAckSlots"), ("WHISP-APS-MIB", "uAcksReservHigh"), ("WHISP-APS-MIB", "numDAckSlots"), ("WHISP-APS-MIB", "dAcksReservHigh"), ("WHISP-APS-MIB", "numCtlSlots"), ("WHISP-APS-MIB", "numCtlSlotsReserveHigh"), ("WHISP-APS-MIB", "upLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "upLnkDataRate"), ("WHISP-APS-MIB", "upLnkLimit"), ("WHISP-APS-MIB", "dwnLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "dwnLnkDataRate"), ("WHISP-APS-MIB", "dwnLnkLimit"), ("WHISP-APS-MIB", "sectorID"), ("WHISP-APS-MIB", "maxRange"), ("WHISP-APS-MIB", "asIP1"), ("WHISP-APS-MIB", "asIP2"), ("WHISP-APS-MIB", "asIP3"), ("WHISP-APS-MIB", "asIP4"), ("WHISP-APS-MIB", "asIP5"), ("WHISP-APS-MIB", "lanIpAp"), ("WHISP-APS-MIB", "lanMaskAp"), ("WHISP-APS-MIB", "defaultGwAp"), ("WHISP-APS-MIB", "privateIp"), ("WHISP-APS-MIB", "gpsTrap"), ("WHISP-APS-MIB", "regTrap"), ("WHISP-APS-MIB", "txSpreading"), ("WHISP-APS-MIB", "apBeaconInfo"), ("WHISP-APS-MIB", "authMode"), ("WHISP-APS-MIB", "authKeyAp"), ("WHISP-APS-MIB", "authKeyOptionAP"), ("WHISP-APS-MIB", "encryptionMode"), ("WHISP-APS-MIB", "ntpServerIp"), ("WHISP-APS-MIB", "multicastRetryCount"), ("WHISP-APS-MIB", "encryptDwBroadcast"), ("WHISP-APS-MIB", "updateAppAddress"), ("WHISP-APS-MIB", "dfsConfig"), ("WHISP-APS-MIB", "vlanEnable"), ("WHISP-APS-MIB", "configSource"), ("WHISP-APS-MIB", "apRateAdapt"), ("WHISP-APS-MIB", "numCtlSlotsHW"), ("WHISP-APS-MIB", "displayAPEval"), ("WHISP-APS-MIB", "smIsolation"), ("WHISP-APS-MIB", "bridgeFloodUnknownsEnable"), ("WHISP-APS-MIB", "ipAccessFilterEnable"), ("WHISP-APS-MIB", "allowedIPAccess1"), ("WHISP-APS-MIB", "allowedIPAccess2"), ("WHISP-APS-MIB", "allowedIPAccess3"), ("WHISP-APS-MIB", "allowedIPAccessNMLength1"), ("WHISP-APS-MIB", "allowedIPAccessNMLength2"), ("WHISP-APS-MIB", "allowedIPAccessNMLength3"), ("WHISP-APS-MIB", "rfTelnetAccess"), ("WHISP-APS-MIB", "rfPPPoEPADIForwarding"), ("WHISP-APS-MIB", "tslBridging"), ("WHISP-APS-MIB", "untranslatedArp"), ("WHISP-APS-MIB", "limitFreqBand900"), ("WHISP-APS-MIB", "txPwrLevel"), ("WHISP-APS-MIB", "rfFreqCaralt1"), ("WHISP-APS-MIB", "rfFreqCaralt2"), ("WHISP-APS-MIB", "scheduleWhitening"), ("WHISP-APS-MIB", "remoteSpectrumAnalysisDuration"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerLUID"), ("WHISP-APS-MIB", "bhReReg"), ("WHISP-APS-MIB", "dlnkBcastCIR"), ("WHISP-APS-MIB", "dlnkMcastCIR"), ("WHISP-APS-MIB", "verifyGPSChecksum"), ("WHISP-APS-MIB", "qinqEthType"), ("WHISP-APS-MIB", "multicastVCDataRate"), ("WHISP-APS-MIB", "colorCodeRescanTimer"), ("WHISP-APS-MIB", "colorCodeRescanIdleTimer"), ("WHISP-APS-MIB", "fskSMTxPwrCntl"), ("WHISP-APS-MIB", "fskSMRcvTargetLvl"), ("WHISP-APS-MIB", "berModSelect"), ("WHISP-APS-MIB", "lastSesStatsReset"), ("WHISP-APS-MIB", "resetSesStats"), ("WHISP-APS-MIB", "syslogDomainNameAppend"), ("WHISP-APS-MIB", "syslogServerAddr"), ("WHISP-APS-MIB", "syslogServerPort"), ("WHISP-APS-MIB", "syslogXmitAP"), ("WHISP-APS-MIB", "syslogXmitSMs"), ("WHISP-APS-MIB", "uGPSPower"), ("WHISP-APS-MIB", "gpsOutputEn"), ("WHISP-APS-MIB", "radioMode"), ("WHISP-APS-MIB", "authSharedSecret1"), ("WHISP-APS-MIB", "authSharedSecret2"), ("WHISP-APS-MIB", "authSharedSecret3"), ("WHISP-APS-MIB", "radiusPort"), ("WHISP-APS-MIB", "radiusAcctPort"), ("WHISP-APS-MIB", "rfOLEnable"), ("WHISP-APS-MIB", "rfOLTrap"), ("WHISP-APS-MIB", "rfOLThreshold"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerScanBandwidth"), ("WHISP-APS-MIB", "apConfigAdjacentChanSupport"), ("WHISP-APS-MIB", "ofdmSMRcvTargetLvl"), ("WHISP-APS-MIB", "apRxDelay"), ("WHISP-APS-MIB", "apVlanOverride"), ("WHISP-APS-MIB", "dhcpRelayAgentEnable"), ("WHISP-APS-MIB", "dhcpRelayAgentSrvrIP"), ("WHISP-APS-MIB", "onlyAllowVer95OrAbove"), ("WHISP-APS-MIB", "whispWebUseAuthServer"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret1"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret2"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret3"), ("WHISP-APS-MIB", "whispUsrAcctSvr1"), ("WHISP-APS-MIB", "whispUsrAcctSvr2"), ("WHISP-APS-MIB", "whispUsrAcctSvr3"), ("WHISP-APS-MIB", "whispUsrAuthPhase1"), ("WHISP-APS-MIB", "accountingInterimUpdateInterval"), ("WHISP-APS-MIB", "accountingSmReAuthInterval"), ("WHISP-APS-MIB", "dropSession"), ("WHISP-APS-MIB", "timeZone"), ("WHISP-APS-MIB", "actionListFilename"), ("WHISP-APS-MIB", "enableAutoupdate"),))
whispApsLinkTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 3)).setObjects(*(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkDescr"), ("WHISP-APS-MIB", "linkPhysAddress"), ("WHISP-APS-MIB", "linkManagementIP"), ("WHISP-APS-MIB", "linkFragmentsReceived1XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived2XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived3XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived4XVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived1XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived2XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived3XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived4XHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioHorizontal"), ("WHISP-APS-MIB", "linkSignalStrengthRatio"), ("WHISP-APS-MIB", "linkRadioDbmHorizontal"), ("WHISP-APS-MIB", "linkRadioDbmVertical"), ("WHISP-APS-MIB", "maxSMTxPwr"), ("WHISP-APS-MIB", "productType"), ("WHISP-APS-MIB", "linkAdaptRateLowPri"), ("WHISP-APS-MIB", "linkAdaptRateHighPri"), ("WHISP-APS-MIB", "autoUpdateStatus"), ("WHISP-APS-MIB", "linkMtu"), ("WHISP-APS-MIB", "linkSpeed"), ("WHISP-APS-MIB", "linkOperStatus"), ("WHISP-APS-MIB", "linkInOctets"), ("WHISP-APS-MIB", "linkInUcastPkts"), ("WHISP-APS-MIB", "linkInNUcastPkts"), ("WHISP-APS-MIB", "linkInDiscards"), ("WHISP-APS-MIB", "linkInError"), ("WHISP-APS-MIB", "linkInUnknownProtos"), ("WHISP-APS-MIB", "linkOutOctets"), ("WHISP-APS-MIB", "linkOutUcastPkts"), ("WHISP-APS-MIB", "linkOutNUcastPkts"), ("WHISP-APS-MIB", "linkOutDiscards"), ("WHISP-APS-MIB", "linkOutError"), ("WHISP-APS-MIB", "linkOutQLen"), ("WHISP-APS-MIB", "linkSessState"), ("WHISP-APS-MIB", "linkESN"), ("WHISP-APS-MIB", "linkRSSI"), ("WHISP-APS-MIB", "linkAveJitter"), ("WHISP-APS-MIB", "linkLastJitter"), ("WHISP-APS-MIB", "linkAirDelay"), ("WHISP-APS-MIB", "linkRegCount"), ("WHISP-APS-MIB", "linkReRegCount"), ("WHISP-APS-MIB", "linkTimeOut"), ("WHISP-APS-MIB", "linkLastRSSI"), ("WHISP-APS-MIB", "sessionCount"), ("WHISP-APS-MIB", "softwareVersion"), ("WHISP-APS-MIB", "softwareBootVersion"), ("WHISP-APS-MIB", "fpgaVersion"), ("WHISP-APS-MIB", "linkSiteName"), ("WHISP-APS-MIB", "avgPowerLevel"), ("WHISP-APS-MIB", "lastPowerLevel"), ("WHISP-APS-MIB", "sesDownLinkRate"), ("WHISP-APS-MIB", "sesDownLinkLimit"), ("WHISP-APS-MIB", "sesUpLinkRate"), ("WHISP-APS-MIB", "sesUpLinkLimit"), ("WHISP-APS-MIB", "adaptRate"), ("WHISP-APS-MIB", "sesLoUpCIR"), ("WHISP-APS-MIB", "sesLoDownCIR"), ("WHISP-APS-MIB", "sesHiUpCIR"), ("WHISP-APS-MIB", "sesHiDownCIR"), ("WHISP-APS-MIB", "platformVer"), ("WHISP-APS-MIB", "smSessionTmr"), ("WHISP-APS-MIB", "smSessionSeqNumMismatch"), ("WHISP-APS-MIB", "dataVCNum"), ("WHISP-APS-MIB", "hiPriQEn"), ("WHISP-APS-MIB", "dataVCNumHiQ"), ("WHISP-APS-MIB", "linkInOctetsHiQ"), ("WHISP-APS-MIB", "linkInUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInDiscardsHiQ"), ("WHISP-APS-MIB", "linkInErrorHiQ"), ("WHISP-APS-MIB", "linkInUnknownProtosHiQ"), ("WHISP-APS-MIB", "linkOutOctetsHiQ"), ("WHISP-APS-MIB", "linkOutUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutDiscardsHiQ"), ("WHISP-APS-MIB", "linkOutErrorHiQ"), ("WHISP-APS-MIB", "vcQOverflow"), ("WHISP-APS-MIB", "vcQOverflowHiQ"), ("WHISP-APS-MIB", "p7p8HiPriQEn"), ("WHISP-APS-MIB", "p7p8HiPriQ"), ("WHISP-APS-MIB", "linkAirDelayns"), ("WHISP-APS-MIB", "linkQualityAPData"), ("WHISP-APS-MIB", "radiusReplyMsg"), ("WHISP-APS-MIB", "radiusFramedIPAddress"), ("WHISP-APS-MIB", "radiusFramedIPNetmask"), ("WHISP-APS-MIB", "radiusDefaultGateway"),))
whispApsNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 4)).setObjects(*(("WHISP-APS-MIB", "whispRegComplete"), ("WHISP-APS-MIB", "whispRegLost"), ("WHISP-APS-MIB", "whispRegFailure"), ("WHISP-APS-MIB", "whispDefKeyUsed"), ("WHISP-APS-MIB", "whispGPSInSync"), ("WHISP-APS-MIB", "whispGPSOutSync"), ("WHISP-APS-MIB", "whispRadarDetected"), ("WHISP-APS-MIB", "whispRadarEnd"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChanFailed"), ("WHISP-APS-MIB", "regulatoryCheckFailedNoRegionAp"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChBwFailed"), ("WHISP-APS-MIB", "rfLinkOverloadCondition"),))
whispApsFailedRegTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 5)).setObjects(*(("WHISP-APS-MIB", "regGrantReason"), ("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regFailTime"), ("WHISP-APS-MIB", "regFailSeqNum"), ("WHISP-APS-MIB", "regFailReasonText"),))
regCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 1), Unsigned32()).setMaxAccess("readonly")
gpsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
radioSlicingAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 3), Integer32()).setMaxAccess("readonly")
radioTxGainAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 4), Integer32()).setMaxAccess("readonly")
dataSlotDwn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 5), Integer32()).setMaxAccess("readonly")
dataSlotUp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 6), Integer32()).setMaxAccess("readonly")
dataSlotUpHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 7), Unsigned32()).setMaxAccess("readonly")
upLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 8), Unsigned32()).setMaxAccess("readonly")
upLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 9), Unsigned32()).setMaxAccess("readonly")
dwnLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 10), Unsigned32()).setMaxAccess("readonly")
dwnLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 11), Unsigned32()).setMaxAccess("readonly")
numCtrSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 12), Unsigned32()).setMaxAccess("readonly")
numCtrSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 13), Unsigned32()).setMaxAccess("readonly")
dfsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 14), DisplayString()).setMaxAccess("readonly")
dfsStatusPrimary = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
dfsStatusAlt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
dfsStatusAlt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 17), DisplayString()).setMaxAccess("readonly")
maxRegSMCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 18), Integer32()).setMaxAccess("readonly")
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 19), DisplayString()).setMaxAccess("readonly")
lastNTPTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 20), DisplayString()).setMaxAccess("readonly")
regulatoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 21), DisplayString()).setMaxAccess("readonly")
dhcpRlyAgntStat_reqRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 22), Counter32()).setLabel("dhcpRlyAgntStat-reqRecvd").setMaxAccess("readonly")
dhcpRlyAgntStat_reqRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 23), Counter32()).setLabel("dhcpRlyAgntStat-reqRelayed").setMaxAccess("readonly")
dhcpRlyAgntStat_reqDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 24), Counter32()).setLabel("dhcpRlyAgntStat-reqDiscards").setMaxAccess("readonly")
dhcpRlyAgntStat_respRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 25), Counter32()).setLabel("dhcpRlyAgntStat-respRecvd").setMaxAccess("readonly")
dhcpRlyAgntStat_respRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 26), Counter32()).setLabel("dhcpRlyAgntStat-respRelayed").setMaxAccess("readonly")
dhcpRlyAgntStat_respDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 27), Counter32()).setLabel("dhcpRlyAgntStat-respDiscards").setMaxAccess("readonly")
dhcpRlyAgntStat_untrustedDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 28), Counter32()).setLabel("dhcpRlyAgntStat-untrustedDiscards").setMaxAccess("readonly")
dhcpRlyAgntStat_maxHopDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 29), Counter32()).setLabel("dhcpRlyAgntStat-maxHopDiscards").setMaxAccess("readonly")
dhcpRlyAgntStat_pktTooBig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 30), Counter32()).setLabel("dhcpRlyAgntStat-pktTooBig").setMaxAccess("readonly")
dhcpRlyAgntStat_invalidGiaddrDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 31), Counter32()).setLabel("dhcpRlyAgntStat-invalidGiaddrDiscards").setMaxAccess("readonly")
regFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 32), Counter32()).setMaxAccess("readonly")
ntpLogSNMP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 33), EventString()).setMaxAccess("readonly")
uGPSPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 34), DisplayString()).setMaxAccess("readonly")
rfOutDiscardRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readonly")
autoUpdateGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 36), Integer32()).setMaxAccess("readonly")
currentRadioFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 37), Integer32()).setMaxAccess("readonly")
ntpDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1),))).setMaxAccess("readwrite")
ntpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 2), DisplayString()).setMaxAccess("readwrite")
ntpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
ntpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 4), DisplayString()).setMaxAccess("readwrite")
dhcprDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1),))).setMaxAccess("readwrite")
dhcprServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 6), DisplayString()).setMaxAccess("readwrite")
authDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disableDNSDomain", 0), ("enableDNSDomain", 1),))).setMaxAccess("readwrite")
authServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 8), DisplayString()).setMaxAccess("readwrite")
authServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 9), DisplayString()).setMaxAccess("readwrite")
authServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 10), DisplayString()).setMaxAccess("readwrite")
authServer4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 11), DisplayString()).setMaxAccess("readwrite")
authServer5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 12), DisplayString()).setMaxAccess("readwrite")
acctDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1),))).setMaxAccess("readwrite")
clearLinkTableStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
whispApsRFConfigRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1), )
whispApsRFConfigRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1), )
whispBoxRFPhysicalRadioEntry.registerAugmentions(("WHISP-APS-MIB", "whispApsRFConfigRadioEntry"))
whispApsRFConfigRadioEntry.setIndexNames(*whispBoxRFPhysicalRadioEntry.getIndexNames())
radioFreqCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("wired", 0),))).setUnits('kHz').setMaxAccess("readwrite")
radioDownlinkPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,99))).setUnits('%').setMaxAccess("readwrite")
radioMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 3), Integer32()).setUnits('miles').setMaxAccess("readwrite")
radioControlSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
radioTransmitOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
radioColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,254))).setMaxAccess("readwrite")
whispLinkTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4), )
whispLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1), ).setIndexNames((0, "WHISP-APS-MIB", "linkLUID"))
linkLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
linkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
linkPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
linkMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
linkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
linkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3),))).setMaxAccess("readonly")
linkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
linkInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
linkInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
linkInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
linkInError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
linkInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
linkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
linkOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
linkOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
linkOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
linkOutError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
linkOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
linkSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("idle", 0), ("inSession", 1), ("clearing", 2), ("reRegDnRst", 3), ("authChal", 4), ("registering", 5), ("notInUse", 6),))).setMaxAccess("readonly")
linkESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 20), PhysAddress()).setMaxAccess("readonly")
linkRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
linkAveJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readonly")
linkLastJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 23), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readonly")
linkAirDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
linkRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
linkReRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
linkTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
linkLastRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
sessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 29), Integer32()).setMaxAccess("readonly")
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
softwareBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 31), DisplayString()).setMaxAccess("readonly")
fpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
linkSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
avgPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
lastPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 35), DisplayString()).setMaxAccess("readonly")
sesDownLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 36), Integer32()).setMaxAccess("readonly")
sesDownLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 37), Integer32()).setMaxAccess("readonly")
sesUpLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 38), Integer32()).setMaxAccess("readonly")
sesUpLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 39), Integer32()).setMaxAccess("readonly")
adaptRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 40), DisplayString()).setMaxAccess("readonly")
sesLoUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 41), Integer32()).setMaxAccess("readonly")
sesLoDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 42), Integer32()).setMaxAccess("readonly")
sesHiUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 43), Integer32()).setMaxAccess("readonly")
sesHiDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 44), Integer32()).setMaxAccess("readonly")
platformVer = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 45), Integer32()).setMaxAccess("readonly")
smSessionTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 46), TimeTicks()).setMaxAccess("readonly")
smSessionSeqNumMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
dataVCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 48), Integer32()).setMaxAccess("readonly")
hiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readonly")
dataVCNumHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 50), Integer32()).setMaxAccess("readonly")
linkInOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
linkInUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
linkInNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
linkInDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
linkInErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
linkInUnknownProtosHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
linkOutOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 57), Counter32()).setMaxAccess("readonly")
linkOutUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
linkOutNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
linkOutDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
linkOutErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 61), Counter32()).setMaxAccess("readonly")
vcQOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
vcQOverflowHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
p7p8HiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("disabled-or-NA", 0), ("enabled", 1),))).setMaxAccess("readonly")
p7p8HiPriQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
linkAirDelayns = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 66), Integer32()).setMaxAccess("readonly")
linkQualityAPData = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 67), DisplayString()).setMaxAccess("readonly")
linkManagementIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 69), IpAddress()).setMaxAccess("readonly")
linkFragmentsReceived1XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 70), Counter32()).setMaxAccess("readonly")
linkFragmentsReceived2XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 71), Counter32()).setMaxAccess("readonly")
linkFragmentsReceived3XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 72), Counter32()).setMaxAccess("readonly")
linkFragmentsReceived4XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 73), Counter32()).setMaxAccess("readonly")
signalToNoiseRatioVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 74), Integer32()).setMaxAccess("readonly")
radiusReplyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 75), DisplayString()).setMaxAccess("readonly")
autoUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 76), Integer32()).setMaxAccess("readonly")
radiusFramedIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 77), IpAddress()).setMaxAccess("readonly")
radiusFramedIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 78), IpAddress()).setMaxAccess("readonly")
radiusDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 79), IpAddress()).setMaxAccess("readonly")
linkFragmentsReceived1XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 80), Counter32()).setMaxAccess("readonly")
linkFragmentsReceived2XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 81), Counter32()).setMaxAccess("readonly")
linkFragmentsReceived3XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 82), Counter32()).setMaxAccess("readonly")
linkFragmentsReceived4XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 83), Counter32()).setMaxAccess("readonly")
signalToNoiseRatioHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 84), Integer32()).setMaxAccess("readonly")
linkSignalStrengthRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 86), DisplayString()).setMaxAccess("readonly")
linkRadioDbmHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 87), DisplayString()).setMaxAccess("readonly")
linkRadioDbmVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 88), DisplayString()).setMaxAccess("readonly")
maxSMTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 89), Integer32()).setMaxAccess("readonly")
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("unknown", 0), ("pmp450MIMOOFDM", 1), ("pmp430SISOOFDM", 2), ("pmp450SISOOFDM", 3),))).setMaxAccess("readonly")
linkAdaptRateLowPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8,))).clone(namedValues=NamedValues(("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8),))).setMaxAccess("readonly")
linkAdaptRateHighPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 6, 8,))).clone(namedValues=NamedValues(("noHighPriorityChannel", -1), ("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8),))).setMaxAccess("readonly")
whispFailedRegTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8), )
whispFailedRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1), ).setIndexNames((0, "WHISP-APS-MIB", "regFailSeqNum"))
regGrantReason = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,))).clone(namedValues=NamedValues(("reggnt-valid", 0), ("reggnt-outofrange", 1), ("reggnt-nolUIDS", 2), ("reggnt-rerange", 3), ("reggnt-authfail", 4), ("reggnt-encryptfail", 5), ("reggnt-poweradjust", 6), ("reggnt-novcs", 7), ("reggnt-failvcreserve", 8), ("reggnt-failvcactive", 9), ("reggnt-failhivcdata", 10), ("reggnt-failsmlimit", 11), ("reggnt-fail95orabove", 12),))).setMaxAccess("readonly")
regFailESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 2), PhysAddress()).setMaxAccess("readonly")
regFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
regFailSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
regFailReasonText = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
mibBuilder.exportSymbols("WHISP-APS-MIB", radiusReplyMsg=radiusReplyMsg, maxDwnLinkIndex=maxDwnLinkIndex, smSessionTmr=smSessionTmr, whispApsGPS=whispApsGPS, linkLUID=linkLUID, signalToNoiseRatioVertical=signalToNoiseRatioVertical, regCount=regCount, maxSMTxPwr=maxSMTxPwr, bitErrorsCorrected4xDwnLinkVertical=bitErrorsCorrected4xDwnLinkVertical, upLnkDataRate=upLnkDataRate, dhcprDomainNameAppend=dhcprDomainNameAppend, rfOLTrap=rfOLTrap, downLinkRate=downLinkRate, syslogXmitAP=syslogXmitAP, linkESN=linkESN, radioDownlinkPercent=radioDownlinkPercent, linkRegCount=linkRegCount, bitErrorsCorrected2xUpLinkHorizontal=bitErrorsCorrected2xUpLinkHorizontal, asIP5=asIP5, defaultGwAp=defaultGwAp, smIsolation=smIsolation, remoteSpectrumAnalysisDuration=remoteSpectrumAnalysisDuration, actDwnLinkIndex=actDwnLinkIndex, colorCodeRescanTimer=colorCodeRescanTimer, radiusFramedIPNetmask=radiusFramedIPNetmask, acctDomainNameAppend=acctDomainNameAppend, apVlanOverride=apVlanOverride, linkTestWithDualPath=linkTestWithDualPath, dwnLnkLimit=dwnLnkLimit, remoteSpectrumAnalyzerScanBandwidth=remoteSpectrumAnalyzerScanBandwidth, upLinkEff=upLinkEff, gpsRestartCount=gpsRestartCount, linkTimeOut=linkTimeOut, txPwrLevel=txPwrLevel, scheduleWhitening=scheduleWhitening, linkInUcastPkts=linkInUcastPkts, autoUpdateGlobalStatus=autoUpdateGlobalStatus, linkTestLUID=linkTestLUID, linkOutErrorHiQ=linkOutErrorHiQ, numCtlSlotsHW=numCtlSlotsHW, ntpServerIp=ntpServerIp, adaptRate=adaptRate, rfFreqCaralt2=rfFreqCaralt2, sesLoDownCIR=sesLoDownCIR, sesLoUpCIR=sesLoUpCIR, bitErrorsCorrected3xUpLinkHorizontal=bitErrorsCorrected3xUpLinkHorizontal, dhcpRlyAgntStat_respDiscards=dhcpRlyAgntStat_respDiscards, linkInNUcastPktsHiQ=linkInNUcastPktsHiQ, fragments3xDwnLinkVertical=fragments3xDwnLinkVertical, linkFragmentsReceived4XVertical=linkFragmentsReceived4XVertical, whispApsRFConfig=whispApsRFConfig, regulatoryApCheckInvalidChBwFailed=regulatoryApCheckInvalidChBwFailed, apLinkSpeed=apLinkSpeed, maxRange=maxRange, dhcpRlyAgntStat_reqDiscards=dhcpRlyAgntStat_reqDiscards, dlnkBcastCIR=dlnkBcastCIR, linkTestPktLength=linkTestPktLength, resetSesStats=resetSesStats, clearLinkTableStats=clearLinkTableStats, fragments4xDwnLinkVertical=fragments4xDwnLinkVertical, allowedIPAccess2=allowedIPAccess2, authServer4=authServer4, radioSlicingAp=radioSlicingAp, ipAccessFilterEnable=ipAccessFilterEnable, linkRSSI=linkRSSI, syslogDomainNameAppend=syslogDomainNameAppend, radioControlSlots=radioControlSlots, timeZone=timeZone, fragments1xUpLinkVertical=fragments1xUpLinkVertical, signalToNoiseRatioDownLinkVertical=signalToNoiseRatioDownLinkVertical, linkTestDuration=linkTestDuration, whispGPSOutSync=whispGPSOutSync, radiusDefaultGateway=radiusDefaultGateway, linkMtu=linkMtu, regulatoryCheckFailedNoRegionAp=regulatoryCheckFailedNoRegionAp, asIP3=asIP3, whispUsrAcctSvr3=whispUsrAcctSvr3, whispApsFailedRegTableGroup=whispApsFailedRegTableGroup, linkTestAction=linkTestAction, linkOutOctetsHiQ=linkOutOctetsHiQ, actUpLinkIndex=actUpLinkIndex, whispFailedRegTable=whispFailedRegTable, dataSlotDwn=dataSlotDwn, gpsTime=gpsTime, bitErrorsCorrected3xDwnLinkVertical=bitErrorsCorrected3xDwnLinkVertical, gpsOutputEn=gpsOutputEn, gpsHeight=gpsHeight, dhcpRlyAgntStat_maxHopDiscards=dhcpRlyAgntStat_maxHopDiscards, signalToNoiseRatioUpLinkHorizontal=signalToNoiseRatioUpLinkHorizontal, allowedIPAccessNMLength1=allowedIPAccessNMLength1, accountingInterimUpdateInterval=accountingInterimUpdateInterval, radioTxGainAp=radioTxGainAp, dhcpRlyAgntStat_pktTooBig=dhcpRlyAgntStat_pktTooBig, sectorID=sectorID, asIP1=asIP1, dwnLnkAckSlot=dwnLnkAckSlot, bitErrorsCorrected4xUpLinkVertical=bitErrorsCorrected4xUpLinkVertical, bhReReg=bhReReg, colorCodeRescanIdleTimer=colorCodeRescanIdleTimer, gpsSyncStatus=gpsSyncStatus, encryptionMode=encryptionMode, broadcastRetryCount=broadcastRetryCount, dhcpRlyAgntStat_reqRecvd=dhcpRlyAgntStat_reqRecvd, dataVCNum=dataVCNum, vcQOverflowHiQ=vcQOverflowHiQ, fragments4xUpLinkHorizontal=fragments4xUpLinkHorizontal, linkDescr=linkDescr, whispRegLost=whispRegLost, radiusAcctPort=radiusAcctPort, fragments1xDwnLinkVertical=fragments1xDwnLinkVertical, regGrantReason=regGrantReason, lastSesStatsReset=lastSesStatsReset, maxUpLinkIndex=maxUpLinkIndex, bitErrorsCorrected1xUpLinkHorizontal=bitErrorsCorrected1xUpLinkHorizontal, whispApsControls=whispApsControls, whispUsrAcctSvr2=whispUsrAcctSvr2, bitErrorsCorrected2xUpLinkVertical=bitErrorsCorrected2xUpLinkVertical, dAcksReservHigh=dAcksReservHigh, upLnkLimit=upLnkLimit, linkOutUcastPkts=linkOutUcastPkts, highPriorityUpLnkPct=highPriorityUpLnkPct, uGPSPowerStatus=uGPSPowerStatus, configSource=configSource, linkTestMode=linkTestMode, signalToNoiseRatioHorizontal=signalToNoiseRatioHorizontal, radioTransmitOutputPower=radioTransmitOutputPower, dfsStatusAlt2=dfsStatusAlt2, linkFragmentsReceived1XHorizontal=linkFragmentsReceived1XHorizontal, authKeyAp=authKeyAp, gpsDate=gpsDate, whispGPSInSync=whispGPSInSync, bitErrorsCorrected1xUpLinkVertical=bitErrorsCorrected1xUpLinkVertical, lanMaskAp=lanMaskAp, linkOutDiscards=linkOutDiscards, linkTestError=linkTestError, whispApsLinkTableGroup=whispApsLinkTableGroup, sesHiUpCIR=sesHiUpCIR, systemTime=systemTime, linkFragmentsReceived2XHorizontal=linkFragmentsReceived2XHorizontal, dwnLnkMaxBurstDataRate=dwnLnkMaxBurstDataRate, dhcpRelayAgentSrvrIP=dhcpRelayAgentSrvrIP, p7p8HiPriQ=p7p8HiPriQ, apBeaconInfo=apBeaconInfo, linkInUnknownProtos=linkInUnknownProtos, ntpLogSNMP=ntpLogSNMP, gpsReInitCount=gpsReInitCount, whispUsrAuthSharedSecret2=whispUsrAuthSharedSecret2, linkInError=linkInError, actUpFragCount=actUpFragCount, txSpreading=txSpreading, linkSignalStrengthRatio=linkSignalStrengthRatio, dropSession=dropSession, sesDownLinkRate=sesDownLinkRate, fragments1xUpLinkHorizontal=fragments1xUpLinkHorizontal, numCtlSlotsReserveHigh=numCtlSlotsReserveHigh, signalToNoiseRatioUpLinkVertical=signalToNoiseRatioUpLinkVertical, actionListFilename=actionListFilename, numCtlSlots=numCtlSlots, sesUpLinkRate=sesUpLinkRate, fragments2xDwnLinkVertical=fragments2xDwnLinkVertical, gpsAntennaConnection=gpsAntennaConnection, displayAPEval=displayAPEval, linkRadioDbmVertical=linkRadioDbmVertical, bitErrorsCorrected1xDwnLinkVertical=bitErrorsCorrected1xDwnLinkVertical, dhcpRlyAgntStat_respRecvd=dhcpRlyAgntStat_respRecvd, limitFreqBand900=limitFreqBand900, authServer3=authServer3, linkTestSNRCalculation=linkTestSNRCalculation, rfOutDiscardRate=rfOutDiscardRate, syslogServerAddr=syslogServerAddr, vcQOverflow=vcQOverflow, regFailureCount=regFailureCount, fpgaVersion=fpgaVersion, allowedIPAccess3=allowedIPAccess3, whispLinkTable=whispLinkTable, gpsLatitude=gpsLatitude, linkInUnknownProtosHiQ=linkInUnknownProtosHiQ, verifyGPSChecksum=verifyGPSChecksum, linkAveJitter=linkAveJitter, whispApsLinkTestResult=whispApsLinkTestResult, whispDefKeyUsed=whispDefKeyUsed, ntpDomainNameAppend=ntpDomainNameAppend, regFailReasonText=regFailReasonText, dataSlotUp=dataSlotUp, linkOutDiscardsHiQ=linkOutDiscardsHiQ, bitErrorsCorrected4xUpLinkHorizontal=bitErrorsCorrected4xUpLinkHorizontal, linkSiteName=linkSiteName, linkOutError=linkOutError, expUpFragCount=expUpFragCount, radioFreqCarrier=radioFreqCarrier, fragments2xDwnLinkHorizontal=fragments2xDwnLinkHorizontal, upLnkAckSlot=upLnkAckSlot, linkAirDelayns=linkAirDelayns, authSharedSecret1=authSharedSecret1, lastNTPTime=lastNTPTime, linkFragmentsReceived3XVertical=linkFragmentsReceived3XVertical, linkFragmentsReceived1XVertical=linkFragmentsReceived1XVertical, fragments4xDwnLinkHorizontal=fragments4xDwnLinkHorizontal, qinqEthType=qinqEthType, whispApsDNS=whispApsDNS, linkOutNUcastPkts=linkOutNUcastPkts, rfOLThreshold=rfOLThreshold, linkAdaptRateHighPri=linkAdaptRateHighPri, whispUsrAuthSharedSecret3=whispUsrAuthSharedSecret3, whispRegFailure=whispRegFailure, gpsReceiverInfo=gpsReceiverInfo, whispApsEvent=whispApsEvent, vlanEnable=vlanEnable, dhcpRlyAgntStat_respRelayed=dhcpRlyAgntStat_respRelayed, softwareBootVersion=softwareBootVersion, autoUpdateStatus=autoUpdateStatus, autoSyncStatus=autoSyncStatus, authServer5=authServer5, lanIpAp=lanIpAp, rfOLEnable=rfOLEnable, linkInErrorHiQ=linkInErrorHiQ, whispApsStatus=whispApsStatus, whispGPSStats=whispGPSStats, whispUsrAcctSvr1=whispUsrAcctSvr1, regulatoryApCheckInvalidChanFailed=regulatoryApCheckInvalidChanFailed, asIP4=asIP4, bridgeFloodUnknownsEnable=bridgeFloodUnknownsEnable, whispRegStatus=whispRegStatus, gpsInvalidMsg=gpsInvalidMsg, bitErrorsCorrected1xDwnLinkHorizontal=bitErrorsCorrected1xDwnLinkHorizontal, sesDownLinkLimit=sesDownLinkLimit, rfPPPoEPADIForwarding=rfPPPoEPADIForwarding, accountingSmReAuthInterval=accountingSmReAuthInterval, multicastVCDataRate=multicastVCDataRate, syslogXmitSMs=syslogXmitSMs, bitErrorsCorrected2xDwnLinkHorizontal=bitErrorsCorrected2xDwnLinkHorizontal, linkTestNumPkt=linkTestNumPkt, privateIp=privateIp, testDuration=testDuration, regTrap=regTrap, linkSessState=linkSessState, linkInOctets=linkInOctets, gpsLongitude=gpsLongitude, gpsStatus=gpsStatus, sessionCount=sessionCount, dhcprServer=dhcprServer, linkFragmentsReceived3XHorizontal=linkFragmentsReceived3XHorizontal, whispApsConfig=whispApsConfig, fragments3xDwnLinkHorizontal=fragments3xDwnLinkHorizontal, whispApsNotifGroup=whispApsNotifGroup, linkAirDelay=linkAirDelay, dwnLnkData=dwnLnkData, whispApsLink=whispApsLink, smSessionSeqNumMismatch=smSessionSeqNumMismatch, regFailESN=regFailESN, enableAutoupdate=enableAutoupdate, authServer1=authServer1, whispApsRFConfigRadios=whispApsRFConfigRadios, whispApsRFConfigRadioEntry=whispApsRFConfigRadioEntry)
mibBuilder.exportSymbols("WHISP-APS-MIB", dataVCNumHiQ=dataVCNumHiQ, gpsTrap=gpsTrap, linkInUcastPktsHiQ=linkInUcastPktsHiQ, bitErrorsCorrected2xDwnLinkVertical=bitErrorsCorrected2xDwnLinkVertical, tslBridging=tslBridging, whispRadarEnd=whispRadarEnd, linkManagementIP=linkManagementIP, authKeyOptionAP=authKeyOptionAP, whispLinkTestGroup=whispLinkTestGroup, expDwnFragCount=expDwnFragCount, linkOperStatus=linkOperStatus, linkAdaptRateLowPri=linkAdaptRateLowPri, numUAckSlots=numUAckSlots, authSharedSecret2=authSharedSecret2, fragments4xUpLinkVertical=fragments4xUpLinkVertical, berMode=berMode, fragments3xUpLinkHorizontal=fragments3xUpLinkHorizontal, ntpServer3=ntpServer3, uGPSPower=uGPSPower, whispApsRegEvent=whispApsRegEvent, whispRadarDetected=whispRadarDetected, linkFragmentsReceived2XVertical=linkFragmentsReceived2XVertical, signalToNoiseRatioDownLinkHorizontal=signalToNoiseRatioDownLinkHorizontal, fragments2xUpLinkHorizontal=fragments2xUpLinkHorizontal, gpsSatellitesTracked=gpsSatellitesTracked, fragments1xDwnLinkHorizontal=fragments1xDwnLinkHorizontal, dfsStatusAlt1=dfsStatusAlt1, dfsStatusPrimary=dfsStatusPrimary, linkOutOctets=linkOutOctets, whispWebUseAuthServer=whispWebUseAuthServer, linkQualityAPData=linkQualityAPData, linkInOctetsHiQ=linkInOctetsHiQ, syslogServerPort=syslogServerPort, linkOutNUcastPktsHiQ=linkOutNUcastPktsHiQ, regFailTime=regFailTime, allowedIPAccessNMLength3=allowedIPAccessNMLength3, whispFailedRegEntry=whispFailedRegEntry, fragments2xUpLinkVertical=fragments2xUpLinkVertical, actDwnFragCount=actDwnFragCount, gpsSyncSource=gpsSyncSource, radioMode=radioMode, apConfigAdjacentChanSupport=apConfigAdjacentChanSupport, radiusPort=radiusPort, authServer2=authServer2, dfsConfig=dfsConfig, whispApsLinkTestConfig=whispApsLinkTestConfig, platformVer=platformVer, upLinkRate=upLinkRate, dhcpRlyAgntStat_untrustedDiscards=dhcpRlyAgntStat_untrustedDiscards, dhcpRlyAgntStat_invalidGiaddrDiscards=dhcpRlyAgntStat_invalidGiaddrDiscards, currentRadioFreqCarrier=currentRadioFreqCarrier, p7p8HiPriQEn=p7p8HiPriQEn, regFailSeqNum=regFailSeqNum, apRateAdapt=apRateAdapt, whispApsMibModule=whispApsMibModule, whispApRFOverloadEvent=whispApRFOverloadEvent, PYSNMP_MODULE_ID=whispApsMibModule, gpsSatellitesVisible=gpsSatellitesVisible, lastPowerLevel=lastPowerLevel, allowedIPAccess1=allowedIPAccess1, linkFragmentsReceived4XHorizontal=linkFragmentsReceived4XHorizontal, authDomainNameAppend=authDomainNameAppend, dhcpRlyAgntStat_reqRelayed=dhcpRlyAgntStat_reqRelayed, linkLastJitter=linkLastJitter, whispApsConfigGroup=whispApsConfigGroup, productType=productType, ntpServer2=ntpServer2, rfTelnetAccess=rfTelnetAccess, berModSelect=berModSelect, dataSlotUpHi=dataSlotUpHi, numCtrSlotHi=numCtrSlotHi, softwareVersion=softwareVersion, linkPhysAddress=linkPhysAddress, dhcpRelayAgentEnable=dhcpRelayAgentEnable, rfFreqCaralt1=rfFreqCaralt1, whispApsDfsEvent=whispApsDfsEvent, fskSMTxPwrCntl=fskSMTxPwrCntl, dlnkMcastCIR=dlnkMcastCIR, regulatoryStatus=regulatoryStatus, whispLinkEntry=whispLinkEntry, radioColorCode=radioColorCode, onlyAllowVer95OrAbove=onlyAllowVer95OrAbove, multicastRetryCount=multicastRetryCount, maxRegSMCount=maxRegSMCount, whispRegComplete=whispRegComplete, untranslatedArp=untranslatedArp, whispUsrAuthSharedSecret1=whispUsrAuthSharedSecret1, gpsFreeRun=gpsFreeRun, sesUpLinkLimit=sesUpLinkLimit, avgPowerLevel=avgPowerLevel, linkOutQLen=linkOutQLen, updateAppAddress=updateAppAddress, radiusFramedIPAddress=radiusFramedIPAddress, linkRadioDbmHorizontal=linkRadioDbmHorizontal, rfFreqCarrier=rfFreqCarrier, fragments3xUpLinkVertical=fragments3xUpLinkVertical, fskSMRcvTargetLvl=fskSMRcvTargetLvl, radioMaxRange=radioMaxRange, whispApRegulatoryEvent=whispApRegulatoryEvent, numCtrSlot=numCtrSlot, linkInDiscardsHiQ=linkInDiscardsHiQ, ntpServer1=ntpServer1, linkInDiscards=linkInDiscards, allowedIPAccessNMLength2=allowedIPAccessNMLength2, gpsInput=gpsInput, gpsTrackingMode=gpsTrackingMode, rfLinkOverloadCondition=rfLinkOverloadCondition, testLUID=testLUID, whispGPSEvent=whispGPSEvent, bitErrorsCorrected4xDwnLinkHorizontal=bitErrorsCorrected4xDwnLinkHorizontal, dfsStatus=dfsStatus, airLinkSecurity=airLinkSecurity, dwnLnkDataRate=dwnLnkDataRate, hiPriQEn=hiPriQEn, ofdmSMRcvTargetLvl=ofdmSMRcvTargetLvl, encryptDwBroadcast=encryptDwBroadcast, bitErrorsCorrected3xUpLinkVertical=bitErrorsCorrected3xUpLinkVertical, dwnLnkAckSlotHi=dwnLnkAckSlotHi, upLnkAckSlotHi=upLnkAckSlotHi, linkTestStatus=linkTestStatus, uAcksReservHigh=uAcksReservHigh, apRxDelay=apRxDelay, linkLastRSSI=linkLastRSSI, remoteSpectrumAnalyzerLUID=remoteSpectrumAnalyzerLUID, linkSpeed=linkSpeed, linkReRegCount=linkReRegCount, whispUsrAuthPhase1=whispUsrAuthPhase1, asIP2=asIP2, authMode=authMode, bitErrorsCorrected3xDwnLinkHorizontal=bitErrorsCorrected3xDwnLinkHorizontal, linkOutUcastPktsHiQ=linkOutUcastPktsHiQ, downLinkEff=downLinkEff, linkInNUcastPkts=linkInNUcastPkts, upLnkMaxBurstDataRate=upLnkMaxBurstDataRate, sesHiDownCIR=sesHiDownCIR, numDAckSlots=numDAckSlots, authSharedSecret3=authSharedSecret3, whispApsGroups=whispApsGroups)
